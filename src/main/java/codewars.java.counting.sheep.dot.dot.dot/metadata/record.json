{
  "id" : "54edbc7200b811e956000556",
  "name" : "Counting sheep...",
  "slug" : "counting-sheep-dot-dot-dot",
  "url" : "https://www.codewars.com/kata/54edbc7200b811e956000556",
  "category" : "reference",
  "languages" : [ "javascript", "java", "ruby", "python", "csharp", "haskell", "elixir", "cpp", "rust", "typescript", "scala", "c", "crystal", "racket", "julia", "go", "coffeescript", "factor", "bf", "php" ],
  "path" : "/projects/66abd1abe4449ec291d23388/",
  "selectedLanguage" : "java",
  "description" : "Consider an array/list of sheep where some sheep may be missing from their place. We need a function that counts the number of sheep present in the array (true means present).\n\nFor example,\n\n```javascript\n[true,  true,  true,  false,\n  true,  true,  true,  true ,\n  true,  false, true,  false,\n  true,  false, false, true ,\n  true,  true,  true,  true ,\n  false, false, true,  true]\n```\n```crystal\n[true,  true,  true,  false,\n  true,  true,  true,  true ,\n  true,  false, true,  false,\n  true,  false, false, true ,\n  true,  true,  true,  true ,\n  false, false, true,  true]\n```\n```python\n[True,  True,  True,  False,\n  True,  True,  True,  True ,\n  True,  False, True,  False,\n  True,  False, False, True ,\n  True,  True,  True,  True ,\n  False, False, True,  True]\n```\n```csharp\n[true,  true,  true,  false,\n  true,  true,  true,  true ,\n  true,  false, true,  false,\n  true,  false, false, true ,\n  true,  true,  true,  true ,\n  false, false, true,  true]\n```\n```c\n{ true,  true,  true,  false,\n  true,  true,  true,  true,\n  true,  false, true,  false,\n  true,  false, false, true,\n  true,  true,  true,  true,\n  false, false, true,  true }\n```\n```cpp\n[true,  true,  true,  false,\n  true,  true,  true,  true ,\n  true,  false, true,  false,\n  true,  false, false, true ,\n  true,  true,  true,  true ,\n  false, false, true,  true]\n```\n```haskell\n[True,  True,  True,  False,\n  True,  True,  True,  True ,\n  True,  False, True,  False,\n  True,  False, False, True ,\n  True,  True,  True,  True ,\n  False, False, True,  True]\n```\n```elixir\n[true,  true,  true,  false,\n  true,  true,  true,  true ,\n  true,  false, true,  false,\n  true,  false, false, true ,\n  true,  true,  true,  true ,\n  false, false, true,  true]\n```\n```rust\n&[true,  true,  true,  false,\n  true,  true,  true,  true ,\n  true,  false, true,  false,\n  true,  false, false, true ,\n  true,  true,  true,  true ,\n  false, false, true,  true]\n```\n```scala\nArray(\n  true,  true,  true,  false,\n  true,  true,  true,  true,\n  true,  false, true,  false,\n  true,  false, false, true,\n  true,  true,  true,  true,\n  false, false, true,  true\n)\n```\n```racket\n;for racket in this kata, \n;only values that are exactly #t count as sheep. \n;any other value is not a sheep.\n(count-sheeps '(#t #t #t #f #t #t 1\n                #t #f #f #f #f #f #f\n                #t #f #t #t #t #t #t\n                #t #t #f #t #t #t 5))\n```\n```factor\n{ t t t f\n  t t t t\n  t f t f\n  t f f t\n  t t t t\n  f f t t }\n```\n```bf\n\"tttftttttftftfftttttfftt\"\n```\n\n\nThe correct answer would be `17`.\n\nHint: Don't forget to check for bad values like `null`/`undefined`\n\n```if:bf\nIn BF, true is represented as the letter 't' (ASCII 116), while false is represented as the letter 'f' (ASCII 102) \n\nInput streams will be terminated with a null character\n```\n",
  "rank" : {
    "id" : -8,
    "name" : "8 kyu",
    "color" : "white"
  },
  "tags" : [ "Arrays", "Fundamentals" ],
  "workUrl" : "https://www.codewars.com/kata/54edbc7200b811e956000556/train/java",
  "completed" : false
}